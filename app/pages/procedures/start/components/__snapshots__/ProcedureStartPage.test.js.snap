// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Submit a form page renders the form and process definition 1`] = `
<div>
  <a
    className="govuk-back-link govuk-!-font-size-19"
    href="#"
    onClick={[Function]}
    style={
      Object {
        "textDecoration": "none",
      }
    }
  >
    Back to procedures
  </a>
  <Loader
    backgroundStyle={
      Object {
        "backgroundColor": "white",
      }
    }
    foregroundStyle={
      Object {
        "color": "black",
      }
    }
    hideContentOnLoad={false}
    message={
      <div
        style={
          Object {
            "borderRadius": 0,
            "justifyContent": "center",
            "left": 0,
            "margin": "auto",
            "position": "absolute",
            "right": 0,
            "top": "-20px",
            "zIndex": 100,
          }
        }
      >
        <DataSpinner
          message="Starting procedure..."
        />
      </div>
    }
    priority={0}
    show={false}
  >
    <div
      className="govuk-grid-row"
    >
      <div
        className="govuk-grid-column-full"
      >
        <div>
          <span
            className="govuk-caption-l"
          >
            Operational procedure
          </span>
          <h2
            className="govuk-heading-l"
          >
            procedure
          </h2>
          <StartForm
            clearProcessDefinition={[MockFunction]}
            dataChange={[Function]}
            fetchProcessDefinition={
              [MockFunction] {
                "calls": Array [
                  Array [
                    "processKey",
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              }
            }
            form={
              Object {
                "components": Array [
                  Object {
                    "allowMultipleMasks": false,
                    "alwaysEnabled": false,
                    "id": "firstNameId",
                    "input": true,
                    "key": "firstName",
                    "label": "First name",
                    "showCharCount": false,
                    "showWordCount": false,
                    "tableView": true,
                    "type": "textfield",
                    "widget": Object {
                      "type": "",
                    },
                  },
                  Object {
                    "allowMultipleMasks": false,
                    "alwaysEnabled": false,
                    "id": "surnameId",
                    "input": true,
                    "key": "surname",
                    "label": "Surname",
                    "showCharCount": false,
                    "showWordCount": false,
                    "tableView": true,
                    "type": "textfield",
                    "widget": Object {
                      "type": "",
                    },
                  },
                  Object {
                    "disableOnInvalid": true,
                    "id": "submitId",
                    "input": true,
                    "key": "submit",
                    "label": "Submit",
                    "tableView": true,
                    "theme": "primary",
                    "type": "button",
                  },
                ],
                "display": "form",
              }
            }
            formReference={[Function]}
            handleSubmit={[Function]}
            history={
              Object {
                "location": Object {
                  "pathname": "/path",
                },
              }
            }
            kc={
              Object {
                "tokenParsed": Object {
                  "email": "email",
                },
              }
            }
            loadingForm={false}
            match={
              Object {
                "params": Object {
                  "processKey": "processKey",
                },
              }
            }
            onCustomEvent={[Function]}
            processDefinition={
              Immutable.Map {
                "formKey": "formKey",
                "process-definition": Immutable.Map {
                  "name": "procedure",
                },
              }
            }
            startForm={
              Object {
                "components": Array [
                  Object {
                    "allowMultipleMasks": false,
                    "alwaysEnabled": false,
                    "id": "firstNameId",
                    "input": true,
                    "key": "firstName",
                    "label": "First name",
                    "showCharCount": false,
                    "showWordCount": false,
                    "tableView": true,
                    "type": "textfield",
                    "widget": Object {
                      "type": "",
                    },
                  },
                  Object {
                    "allowMultipleMasks": false,
                    "alwaysEnabled": false,
                    "id": "surnameId",
                    "input": true,
                    "key": "surname",
                    "label": "Surname",
                    "showCharCount": false,
                    "showWordCount": false,
                    "tableView": true,
                    "type": "textfield",
                    "widget": Object {
                      "type": "",
                    },
                  },
                  Object {
                    "disableOnInvalid": true,
                    "id": "submitId",
                    "input": true,
                    "key": "submit",
                    "label": "Submit",
                    "tableView": true,
                    "theme": "primary",
                    "type": "button",
                  },
                ],
                "display": "form",
              }
            }
            submissionStatus={null}
          />
        </div>
      </div>
    </div>
  </Loader>
</div>
`;
