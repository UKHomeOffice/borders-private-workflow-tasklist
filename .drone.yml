workspace:
  base: /build
  path: src/github.com/ukhomeoffice/cop-private-workflow-tasklist

pipeline:
  test:
    image: node:10
    commands:
    - npm install
    - npm run test:coverage
    when:
      event: push

  image_to_quay:
    image: quay.io/ukhomeofficedigital/drone-docker
    secrets:
    - source: DEV_QUAY_USERNAME
      target: DOCKER_USERNAME
    - source: DEV_QUAY_PASSWORD
      target: DOCKER_PASSWORD
    - source: DEV_WWW_STORAGE_KEY
      target: DEV_WWW_STORAGE_KEY
    registry: quay.io
    repo: quay.io/ukhomeofficedigital/cop-private-workflow-tasklist
    build_args:
      - WWW_STORAGE_KEY=$${WWW_DEV_STORAGE_KEY}
    tags: ${DRONE_COMMIT_SHA}
    when:
      branch: master
      event: push

  deploy_to_dev:
    image: quay.io/ukhomeofficedigital/kd
    secrets:
      - DEV_KEYCLOAK_PROTOCOL
      - DEV_KEYCLOAK_URL
      - DEV_KEYCLOAK_REALM
      - DEV_NGINX_IMAGE
      - DEV_NGINX_TAG
      - DEV_KUBE_SERVER
      - DEV_KUBE_TOKEN
      - DEV_WHITELIST
      - DEV_WWW_NAME
      - DEV_WWW_URL
      - DEV_WWW_PROTOCOL
      - DEV_WWW_PORT
      - DEV_WWW_UI_ENVIRONMENT
      - DEV_WWW_UI_VERSION
      - DEV_WWW_KEYCLOAK_CLIENT_ID
      - DEV_WWW_KEYCLOAK_ACCESS_ROLE
      - DEV_WWW_STORAGE_KEY
      - DEV_WWW_IMAGE
      - DEV_WWW_KUBE_NAMESPACE
      - DEV_REPORT_URL
      - DEV_REPORT_PROTOCOL
      - DEV_API_REF_URL
      - DEV_API_REF_PROTOCOL
      - DEV_API_COP_URL
      - DEV_API_COP_PROTOCOL
      - DEV_ENGINE_URL
      - DEV_ENGINE_PROTOCOL
      - DEV_TRANSLATION_URL
      - DEV_TRANSLATION_PROTOCOL
    commands:
      - export KEYCLOAK_PROTOCOL=$${DEV_KEYCLOAK_PROTOCOL}
      - export KEYCLOAK_URL=$${DEV_KEYCLOAK_URL}
      - export KEYCLOAK_REALM=$${DEV_KEYCLOAK_REALM}
      - export NGINX_IMAGE=$${DEV_NGINX_IMAGE}
      - export NGINX_TAG=$${DEV_NGINX_TAG}
      - export KUBE_SERVER=$${DEV_KUBE_SERVER}
      - export KUBE_TOKEN=$${DEV_KUBE_TOKEN}
      - export KUBE_NAMESPACE=$${DEV_WWW_KUBE_NAMESPACE}
      - export WHITELIST=$${DEV_WHITELIST}
      - export WWW_NAME=$${DEV_WWW_NAME}
      - export WWW_URL=$${DEV_WWW_URL}
      - export WWW_PROTOCOL=$${DEV_WWW_PROTOCOL}
      - export WWW_PORT=$${DEV_WWW_PORT}
      - export WWW_UI_ENVIRONMENT=$${DEV_WWW_UI_ENVIRONMENT}
      - export WWW_UI_VERSION=$${DEV_WWW_UI_VERSION}
      - export WWW_KEYCLOAK_CLIENT_ID=$${DEV_WWW_KEYCLOAK_CLIENT_ID}
      - export WWW_KEYCLOAK_ACCESS_ROLE=$${DEV_WWW_KEYCLOAK_ACCESS_ROLE}
      - export WWW_STORAGE_KEY=$${DEV_WWW_STORAGE_KEY}
      - export WWW_IMAGE=$${DEV_WWW_IMAGE}
      - export WWW_KUBE_NAMESPACE=$${DEV_WWW_KUBE_NAMESPACE}
      - export REPORT_URL=$${DEV_REPORT_URL}
      - export REPORT_PROTOCOL=$${DEV_REPORT_PROTOCOL}
      - export API_REF_URL=$${DEV_API_REF_URL}
      - export API_REF_PROTOCOL=$${DEV_API_REF_PROTOCOL}
      - export API_COP_URL=$${DEV_API_COP_URL}
      - export API_COP_PROTOCOL=$${DEV_API_COP_PROTOCOL}
      - export ENGINE_URL=$${DEV_ENGINE_URL}
      - export ENGINE_PROTOCOL=$${DEV_ENGINE_PROTOCOL}
      - export TRANSLATION_URL=$${DEV_TRANSLATION_URL}
      - export TRANSLATION_PROTOCOL=$${DEV_TRANSLATION_PROTOCOL}
      - export WWW_TAG=$${DRONE_COMMIT_SHA}
      - kd --insecure-skip-tls-verify -f kube/network-policy.yml
      - kd --insecure-skip-tls-verify -f kube/service.yml
      - kd --insecure-skip-tls-verify -f kube/deployment.yml --timeout=5m
      - kd --insecure-skip-tls-verify -f kube/ingress.yml
    when:
      branch: master
      event: push

  deploy_to_staging:
    image: quay.io/ukhomeofficedigital/kd
    secrets:
      - STAGING_KEYCLOAK_PROTOCOL
      - STAGING_KEYCLOAK_URL
      - STAGING_KEYCLOAK_REALM
      - STAGING_NGINX_IMAGE
      - STAGING_NGINX_TAG
      - STAGING_KUBE_SERVER
      - STAGING_KUBE_TOKEN
      - STAGING_WHITELIST
      - STAGING_WWW_NAME
      - STAGING_WWW_URL
      - STAGING_WWW_PROTOCOL
      - STAGING_WWW_PORT
      - STAGING_WWW_UI_ENVIRONMENT
      - STAGING_WWW_UI_VERSION
      - STAGING_WWW_KEYCLOAK_CLIENT_ID
      - STAGING_WWW_KEYCLOAK_ACCESS_ROLE
      - STAGING_WWW_STORAGE_KEY
      - STAGING_WWW_IMAGE
      - STAGING_WWW_KUBE_NAMESPACE
      - STAGING_REPORT_URL
      - STAGING_REPORT_PROTOCOL
      - STAGING_API_REF_URL
      - STAGING_API_REF_PROTOCOL
      - STAGING_API_COP_URL
      - STAGING_API_COP_PROTOCOL
      - STAGING_ENGINE_URL
      - STAGING_ENGINE_PROTOCOL
      - STAGING_TRANSLATION_URL
      - STAGING_TRANSLATION_PROTOCOL
    commands:
      - export KEYCLOAK_PROTOCOL=$${STAGING_KEYCLOAK_PROTOCOL}
      - export KEYCLOAK_URL=$${STAGING_KEYCLOAK_URL}
      - export KEYCLOAK_REALM=$${STAGING_KEYCLOAK_REALM}
      - export NGINX_IMAGE=$${STAGING_NGINX_IMAGE}
      - export NGINX_TAG=$${STAGING_NGINX_TAG}
      - export KUBE_SERVER=$${STAGING_KUBE_SERVER}
      - export KUBE_TOKEN=$${STAGING_KUBE_TOKEN}
      - export KUBE_NAMESPACE=$${STAGING_WWW_KUBE_NAMESPACE}
      - export WHITELIST=$${STAGING_WHITELIST}
      - export WWW_NAME=$${STAGING_WWW_NAME}
      - export WWW_URL=$${STAGING_WWW_URL}
      - export WWW_PROTOCOL=$${STAGING_WWW_PROTOCOL}
      - export WWW_PORT=$${STAGING_WWW_PORT}
      - export WWW_UI_ENVIRONMENT=$${STAGING_WWW_UI_ENVIRONMENT}
      - export WWW_UI_VERSION=$${STAGING_WWW_UI_VERSION}
      - export WWW_KEYCLOAK_CLIENT_ID=$${STAGING_WWW_KEYCLOAK_CLIENT_ID}
      - export WWW_KEYCLOAK_ACCESS_ROLE=$${STAGING_WWW_KEYCLOAK_ACCESS_ROLE}
      - export WWW_STORAGE_KEY=$${STAGING_WWW_STORAGE_KEY}
      - export WWW_IMAGE=$${STAGING_WWW_IMAGE}
      - export WWW_KUBE_NAMESPACE=$${STAGING_WWW_KUBE_NAMESPACE}
      - export REPORT_URL=$${STAGING_REPORT_URL}
      - export REPORT_PROTOCOL=$${STAGING_REPORT_PROTOCOL}
      - export API_REF_URL=$${STAGING_API_REF_URL}
      - export API_REF_PROTOCOL=$${STAGING_API_REF_PROTOCOL}
      - export API_COP_URL=$${STAGING_API_COP_URL}
      - export API_COP_PROTOCOL=$${STAGING_API_COP_PROTOCOL}
      - export ENGINE_URL=$${STAGING_ENGINE_URL}
      - export ENGINE_PROTOCOL=$${STAGING_ENGINE_PROTOCOL}
      - export TRANSLATION_URL=$${STAGING_TRANSLATION_URL}
      - export TRANSLATION_PROTOCOL=$${STAGING_TRANSLATION_PROTOCOL}
      - export WWW_TAG=$${DRONE_COMMIT_SHA}
      - kd --insecure-skip-tls-verify -f kube/network-policy.yml
      - kd --insecure-skip-tls-verify -f kube/service.yml
      - kd --insecure-skip-tls-verify -f kube/deployment.yml --timeout=5m
      - kd --insecure-skip-tls-verify -f kube/ingress.yml
    when:
      environment: staging
      event: deployment

  deploy_to_production:
    image: quay.io/ukhomeofficedigital/kd
    secrets:
      - PRODUCTION_KEYCLOAK_PROTOCOL
      - PRODUCTION_KEYCLOAK_URL
      - PRODUCTION_KEYCLOAK_REALM
      - PRODUCTION_NGINX_IMAGE
      - PRODUCTION_NGINX_TAG
      - PRODUCTION_KUBE_SERVER
      - PRODUCTION_KUBE_TOKEN
      - PRODUCTION_WHITELIST
      - PRODUCTION_WWW_NAME
      - PRODUCTION_WWW_URL
      - PRODUCTION_WWW_PROTOCOL
      - PRODUCTION_WWW_PORT
      - PRODUCTION_WWW_UI_ENVIRONMENT
      - PRODUCTION_WWW_UI_VERSION
      - PRODUCTION_WWW_KEYCLOAK_CLIENT_ID
      - PRODUCTION_WWW_KEYCLOAK_ACCESS_ROLE
      - PRODUCTION_WWW_STORAGE_KEY
      - PRODUCTION_WWW_IMAGE
      - PRODUCTION_WWW_KUBE_NAMESPACE
      - PRODUCTION_REPORT_URL
      - PRODUCTION_REPORT_PROTOCOL
      - PRODUCTION_API_REF_URL
      - PRODUCTION_API_REF_PROTOCOL
      - PRODUCTION_API_COP_URL
      - PRODUCTION_API_COP_PROTOCOL
      - PRODUCTION_ENGINE_URL
      - PRODUCTION_ENGINE_PROTOCOL
      - PRODUCTION_TRANSLATION_URL
      - PRODUCTION_TRANSLATION_PROTOCOL
    commands:
      - export KEYCLOAK_PROTOCOL=$${PRODUCTION_KEYCLOAK_PROTOCOL}
      - export KEYCLOAK_URL=$${PRODUCTION_KEYCLOAK_URL}
      - export KEYCLOAK_REALM=$${PRODUCTION_KEYCLOAK_REALM}
      - export NGINX_IMAGE=$${PRODUCTION_NGINX_IMAGE}
      - export NGINX_TAG=$${PRODUCTION_NGINX_TAG}
      - export KUBE_SERVER=$${PRODUCTION_KUBE_SERVER}
      - export KUBE_TOKEN=$${PRODUCTION_KUBE_TOKEN}
      - export KUBE_NAMESPACE=$${PRODUCTION_WWW_KUBE_NAMESPACE}
      - export WHITELIST=$${PRODUCTION_WHITELIST}
      - export WWW_NAME=$${PRODUCTION_WWW_NAME}
      - export WWW_URL=$${PRODUCTION_WWW_URL}
      - export WWW_PROTOCOL=$${PRODUCTION_WWW_PROTOCOL}
      - export WWW_PORT=$${PRODUCTION_WWW_PORT}
      - export WWW_UI_ENVIRONMENT=$${PRODUCTION_WWW_UI_ENVIRONMENT}
      - export WWW_UI_VERSION=$${PRODUCTION_WWW_UI_VERSION}
      - export WWW_KEYCLOAK_CLIENT_ID=$${PRODUCTION_WWW_KEYCLOAK_CLIENT_ID}
      - export WWW_KEYCLOAK_ACCESS_ROLE=$${PRODUCTION_WWW_KEYCLOAK_ACCESS_ROLE}
      - export WWW_STORAGE_KEY=$${PRODUCTION_WWW_STORAGE_KEY}
      - export WWW_IMAGE=$${PRODUCTION_WWW_IMAGE}
      - export WWW_KUBE_NAMESPACE=$${PRODUCTION_WWW_KUBE_NAMESPACE}
      - export REPORT_URL=$${PRODUCTION_REPORT_URL}
      - export REPORT_PROTOCOL=$${PRODUCTION_REPORT_PROTOCOL}
      - export API_REF_URL=$${PRODUCTION_API_REF_URL}
      - export API_REF_PROTOCOL=$${PRODUCTION_API_REF_PROTOCOL}
      - export API_COP_URL=$${PRODUCTION_API_COP_URL}
      - export API_COP_PROTOCOL=$${PRODUCTION_API_COP_PROTOCOL}
      - export ENGINE_URL=$${PRODUCTION_ENGINE_URL}
      - export ENGINE_PROTOCOL=$${PRODUCTION_ENGINE_PROTOCOL}
      - export TRANSLATION_URL=$${PRODUCTION_TRANSLATION_URL}
      - export TRANSLATION_PROTOCOL=$${PRODUCTION_TRANSLATION_PROTOCOL}
      - export WWW_TAG=$${DRONE_COMMIT_SHA}
      - kd --insecure-skip-tls-verify -f kube/network-policy.yml
      - kd --insecure-skip-tls-verify -f kube/service.yml
      - kd --insecure-skip-tls-verify -f kube/deployment.yml --timeout=5m
      - kd --insecure-skip-tls-verify -f kube/ingress.yml
    when:
      environment: production
      event: deployment


  notify:
    image: plugins/slack
    secrets: [ SLACK_WEBHOOK ]
    channel: cop-deployments
    username: Drone Build Watcher
    template: >
      {{#build.deployTo}}
        *{{repo.name}} - Build {{build.number}} - {{uppercasefirst build.deployTo}} - {{uppercase build.status}}*
        {{build.link}}
      {{else}}
        *{{repo.name}} - Build {{build.number}} - Development - {{uppercase build.status}}*
        {{build.link}}
      {{/build.deployTo}}
    when:
      branch: master
      event: [ push, deployment ]
      status: [ success, failure ]
